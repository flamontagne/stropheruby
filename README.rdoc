= strophe_ruby

* http://stropheruby.rubyforge.org

== DESCRIPTION:

Ruby bindings for Strophe (http://code.stanziq.com/strophe), a C library for 
writing XMPP clients. If all you need is a simple XMPP bot that
react to message and presence notifications, you might be better off
with XMPPBot, which is an implementation I wrote on top of StropheRuby.
This project is NOT on RubyForge or github yet. 

IMPORTANT : This gem is quite experimental currently... it is not ready 
for production!

Strophe (http://code.stanziq.com/strophe/), is a robust and well written 
C library that allows the developer to implement XMPP clients.

I wanted to be able to use the power of this library with the ruby 
syntax. I didn't use SWIG to generate the bindings for 2 reasons :

1. I wanted to learn how to write a C extension for ruby
2. I didn't like how SWIG generate gazilions of lines of code

My other project, XMPPBot, is an implementation of Strophe Ruby that 
allows the ruby developer to write a XMPP bot in a few lines of code.

License: GNU General Public License (GPL)

The RubyForge admin team will now examine your project submission.  You 
will be notified of their decision.

== FEATURES/PROBLEMS:

- Currently no Support for TLS

== SYNOPSIS:

require 'strophe_ruby'
def announce_presence
  presence = StropheRuby::Stanza.new
  presence.name="presence"
  presence.set_attribute("show", "available")
  @conn.send(presence)
end

def register_callbacks
  @conn.add_handler("presence") do |pres|
	if pres.type == "subscribe"
	
	  #We accept everyone
	  stanza = StropheRuby::Stanza.new
	  stanza.name = "presence"
	  stanza.type = "subscribed"	                
	  stanza.set_attribute("to",pres.attribute("from"))
	  	  
	  @conn.send(stanza)
	  
	  #Now it's our turn to send a subscription request
	  stanza = StropheRuby::Stanza.new
	  stanza.name = "presence"
	  stanza.type = "subscribe"	                
	  stanza.set_attribute("to",pres.attribute("from"))
	  @conn.send(stanza)
	  
	 end
  end

  #Echo every messages
  @conn.add_handler("message") do |msg|
	body=msg.child_by_name("body")
	if body
		if body.text.to_s == "exit"
			disconnect
		else
			stanza = StropheRuby::Stanza.new
			stanza.name = "message"
			stanza.set_attribute("to",msg.attribute("from"))

		    body_stanza = StropheRuby::Stanza.new
		    body_stanza.name="body"

		    text_stanza = StropheRuby::Stanza.new
		    text_stanza.text="I'm very happy for you"

		    body_stanza.add_child(text_stanza)    
		    stanza.add_child(body_stanza)

			@conn.send(stanza)
		end
	end
  end
end

StropheRuby::EventLoop.prepare

@ctx = StropheRuby::Context.new(StropheRuby::Logging::DEBUG)
@conn =  StropheRuby::Connection.new(@ctx)

@conn.jid = "bot@example.com"
@conn.password = "secret"

@conn.connect do |status|
  if status == StropheRuby::ConnectionEvents::CONNECT
    announce_presence
    register_callbacks
  else
	StropheRuby::EventLoop.stop(@ctx)  
  end
end

def disconnect
	StropheRuby::EventLoop.stop(@ctx)
end


#This is a blocking call
StropheRuby::EventLoop.run(@ctx)

#Once the loop has exit, we can shutdown strophe
StropheRuby::EventLoop.shutdown
puts "Program has ended normally"
exit

== REQUIREMENTS:

* Coming soon...

== INSTALL:

* Coming soon...

== LICENSE:

(The MIT License)

Copyright (c) 2008 Fran√ßois Lamontagne

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
